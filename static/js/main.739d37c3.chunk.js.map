{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","httpClient.ts","getTodos.ts","components/TodoModal/TodoModal.tsx","getPosts.ts","app/hooks.ts","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","value","filterReducer","query","status","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","setChosenTodo","setIsModalLoading","chosenTodo","className","map","id","title","completed","cn","onClick","TodoFilter","setFilterQuery","setFilterStatus","onChange","e","selectedStatus","target","placeholder","selectedQuery","style","pointerEvents","Loader","getData","url","fullURL","fetch","then","response","ok","Error","json","TodoModal","isLoading","setIsLoading","clearTodo","useState","post","setPost","userId","useEffect","getPosts","data","finally","href","email","name","useAppDispatch","useDispatch","useAppSelector","useSelector","App","isModalLoading","errorMessage","setErrorMessage","dispatch","actionsTodos","catch","message","filteredTodos","useMemo","filteredByTodos","length","toLowerCase","includes","actionsFilter","actionsTodo","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.739d37c3.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\nexport type RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","// we use string literal as a type to avoid mistype in future\n\n// payload is a typical name for an action data\nexport type ChangeQueryAction = {\n  type: 'currentQuery/CHANGE';\n  payload: string;\n};\n\n// Action creator return type protect us from a mistype\nconst changeQuery = (value: string): ChangeQueryAction => ({\n  type: 'currentQuery/CHANGE', payload: value,\n});\n\nexport type ChangeStatusAction = {\n  type: 'currentStatus/CHANGE';\n  payload: string;\n};\n\nconst changeStatus = (\n  value: string,\n): ChangeStatusAction => ({\n  type: 'currentStatus/CHANGE', payload: value,\n});\n\n// These actions will be used in the application\nexport const actions = { changeQuery, changeStatus };\n\ntype State = { query: string, status: string };\ntype Action = ChangeQueryAction | ChangeStatusAction;\n\nconst filterReducer = (\n  state: State = { query: '', status: 'all' },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentQuery/CHANGE':\n      return { ...state, query: action.payload };\n    case 'currentStatus/CHANGE':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'currentTodos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'currentTodos/SET', payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\n\nconst todosReducer = (state: State = [], action: SetTodosAction): Todo[] => {\n  switch (action.type) {\n    case 'currentTodos/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  setChosenTodo: (par: Todo) => void;\n  setIsModalLoading: (par: boolean) => void;\n  chosenTodo: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setChosenTodo,\n  setIsModalLoading,\n  chosenTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos?.map((todo) => {\n        const {\n          id,\n          title,\n          completed,\n        } = todo;\n\n        function handleButton() {\n          setChosenTodo(todo);\n          setIsModalLoading(true);\n        }\n\n        return (\n          <tr key={id} data-cy=\"todo\" className=\"\">\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={handleButton}\n              >\n                <span className=\"icon\">\n                  <i className={cn({\n                    'far fa-eye': !chosenTodo,\n                    'far fa-eye-slash': chosenTodo,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { ChangeEvent, FC } from 'react';\nimport { ChangeQueryAction, ChangeStatusAction } from '../../features/filter';\n\ninterface Filter {\n  status: string;\n  query: string;\n}\n\ntype Props = {\n  filter: Filter;\n  setFilterQuery: (value: string) => ChangeQueryAction;\n  setFilterStatus: (value: string) => ChangeStatusAction;\n};\n\nexport const TodoFilter: FC<Props> = ({\n  filter,\n  setFilterQuery,\n  setFilterStatus,\n}) => {\n  const { query, status } = filter;\n\n  const handleStatusChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    const selectedStatus = e.target.value;\n\n    setFilterStatus(selectedStatus);\n  };\n\n  const handleQueryChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const selectedQuery = e.target.value;\n\n    setFilterQuery(selectedQuery);\n  };\n\n  const handleClearSearch = () => {\n    setFilterQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={status}\n            data-cy=\"statusSelect\"\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              onClick={handleClearSearch}\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL\n  = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nexport function getData<T>(url: string): Promise<T> {\n  const fullURL = `${BASE_URL}${url}.json`;\n\n  return fetch(fullURL)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error');\n      }\n\n      return response.json();\n    });\n}\n","import { getData } from './httpClient';\nimport { Todo } from './types/Todo';\n\nexport const getTodos = () => {\n  return getData<Todo[]>('/todos');\n};\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getPosts } from '../../getPosts';\nimport { Todo } from '../../types/Todo';\nimport { RemoveTodoAction } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo,\n  isLoading: boolean;\n  setIsLoading: (par: boolean) => void;\n  clearTodo: () => RemoveTodoAction;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  isLoading,\n  setIsLoading,\n  clearTodo,\n}) => {\n  const [post, setPost] = useState<User>({} as User);\n\n  const {\n    userId,\n    id,\n    title,\n    completed,\n  } = todo;\n\n  useEffect(() => {\n    getPosts(userId)\n      .then(data => setPost(data))\n      .finally(() => setIsLoading(false));\n  }, [post]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={clearTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className={cn({\n                'has-text-danger': !completed,\n                'has-text-success': completed,\n              })}\n              >\n                { completed ? 'Done' : 'Planned' }\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${post.email}`}>\n                {post.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { getData } from './httpClient';\nimport { User } from './types/User';\n\nexport const getPosts = (userId: number) => {\n  return getData<User>(`/users/${userId}`);\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, {\n  useMemo,\n  useEffect,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './getTodos';\nimport { Todo } from './types/Todo';\nimport { TodoModal } from './components/TodoModal';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as actionsTodos } from './features/todos';\nimport { actions as actionsFilter } from './features/filter';\nimport { actions as actionsTodo } from './features/currentTodo';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isModalLoading, setIsModalLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const chosenTodo = useAppSelector(state => state.currentTodo);\n  const setChosenTodo = (todo: Todo) => dispatch(actionsTodo.setTodo(todo));\n  const setFilterQuery = (value: string) => dispatch(actionsFilter.changeQuery(value));\n  const setFilterStatus = (value: string) => dispatch(actionsFilter.changeStatus(value));\n  const clearTodo = () => dispatch(actionsTodo.removeTodo());\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then((data) => dispatch(actionsTodos.setTodos(data)))\n      .catch((e) => setErrorMessage(e.message))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const filteredTodos = useMemo(() => {\n    const filteredByTodos = todos.length ? todos.filter((todo) => {\n      const { completed } = todo;\n      const { status } = filter;\n\n      switch (status) {\n        case 'all':\n          return true;\n        case 'active':\n          return !completed;\n        case 'completed':\n          return completed;\n        default:\n          return true;\n      }\n    })\n      : [];\n\n    const { query } = filter;\n\n    const filteredByQueryTodos = query\n      ? filteredByTodos.filter((todo) => todo.title\n        .toLowerCase().includes(query.toLowerCase())) : filteredByTodos;\n\n    return filteredByQueryTodos;\n  }, [filter.status, filter.query, todos]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filter={filter}\n                setFilterQuery={setFilterQuery}\n                setFilterStatus={setFilterStatus}\n              />\n            </div>\n            {isLoading && !errorMessage && <Loader />}\n\n            {!isLoading && (\n              <div className=\"block\">\n                <TodoList\n                  chosenTodo={chosenTodo}\n                  setIsModalLoading={setIsModalLoading}\n                  todos={filteredTodos}\n                  setChosenTodo={setChosenTodo}\n                />\n              </div>\n            )}\n\n            {errorMessage && <p>{errorMessage}</p>}\n          </div>\n        </div>\n      </div>\n\n      {!!chosenTodo\n      && (<TodoModal clearTodo={clearTodo} isLoading={isModalLoading} setIsLoading={setIsModalLoading} todo={chosenTodo} />)}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}